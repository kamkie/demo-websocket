def getVersionName = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'describe', '--tags'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

buildscript {
    ext {
        springBootVersion = '1.3.2.RELEASE'
        tyrusVersion = '1.12'
        rxJavaVersion = '1.1.1'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

allprojects {
    group 'net.devopssolutions'
    version getVersionName()

    repositories {
        mavenCentral()
    }
}

subprojects {
    apply plugin: 'java'
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    dependencies {
        compile 'org.projectlombok:lombok:1.16.6'

        testCompile group: 'junit', name: 'junit', version: '4.11'
    }
}

project(':ws-client') {
    apply plugin: 'spring-boot'

    dependencies {
        compile project(':ws-models')

        compile("org.springframework.boot:spring-boot-starter")
        compile("org.springframework.boot:spring-boot-devtools")
        compile("org.springframework.boot:spring-boot-configuration-processor")
        compile("org.glassfish.tyrus:tyrus-container-jdk-client:$tyrusVersion")
        compile("org.glassfish.tyrus.ext:tyrus-client-java8:$tyrusVersion")
    }
}
project(':ws-server') {
    apply plugin: 'spring-boot'

    dependencies {
        compile project(':ws-models')

        compile("org.springframework.boot:spring-boot-starter-web")
        compile("org.springframework.boot:spring-boot-starter-websocket")
        compile("org.springframework.boot:spring-boot-actuator")
        compile("org.springframework.boot:spring-boot-devtools")
        compile("org.springframework.boot:spring-boot-configuration-processor")

        compile("io.reactivex:rxjava:$rxJavaVersion")
    }
}



